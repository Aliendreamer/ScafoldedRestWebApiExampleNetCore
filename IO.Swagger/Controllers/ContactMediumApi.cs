/*
 * CustomerManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ContactMediumApiController : ControllerBase
    { 
        /// <summary>
        /// Updates contactMedium of a &#39;Customer&#39; by Id
        /// </summary>
        
        /// <param name="authorization">token to be passed as a header linked to the user whose identity is requested</param>
        /// <param name="id">Identifier of the Customer</param>
        /// <param name="contactMedium">ContactMedium</param>
        /// <response code="200">Updated</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Method Not allowed</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPatch]
        [Route("/customerManagement/customer/{id}/contactMedium")]
        [ValidateModelState]
        [SwaggerOperation("PatchCustomerContactMedium")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContactMedium), description: "Updated")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Method Not allowed")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual IActionResult PatchCustomerContactMedium([FromHeader][Required()]string authorization, [FromRoute][Required]string id, [FromBody]ContactMedium contactMedium)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContactMedium));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            string exampleJson = null;
            exampleJson = "{\n  \"contactMediumType\" : \"emailAddress\",\n  \"validFor\" : {\n    \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"preferred\" : true,\n  \"characteristic\" : {\n    \"country\" : \"country\",\n    \"emailAddress\" : \"emailAddress\",\n    \"mediumCharacteristicType\" : \"mediumCharacteristicType\",\n    \"phoneNumber\" : \"phoneNumber\",\n    \"stateOrProvince\" : \"stateOrProvince\",\n    \"city\" : \"city\",\n    \"faxNumber\" : \"faxNumber\",\n    \"postCode\" : \"postCode\",\n    \"street1\" : \"street1\",\n    \"street2\" : \"street2\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContactMedium>(exampleJson)
            : default(ContactMedium);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

/*
 * CustomerManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Indicates the contact medium that could be used to contact the party.
    /// </summary>
    [DataContract]
    public partial class ContactMedium : IEquatable<ContactMedium>
    { 
        /// <summary>
        /// If true, indicates that is the preferred contact medium
        /// </summary>
        /// <value>If true, indicates that is the preferred contact medium</value>
        [DataMember(Name="preferred")]
        public bool? Preferred { get; set; }

        /// <summary>
        /// Type of the contact medium, such as: email address, telephone number, postal address
        /// </summary>
        /// <value>Type of the contact medium, such as: email address, telephone number, postal address</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContactMediumTypeEnum
        {
            
            /// <summary>
            /// Enum EmailAddressEnum for emailAddress
            /// </summary>
            [EnumMember(Value = "emailAddress")]
            EmailAddressEnum = 1,
            
            /// <summary>
            /// Enum PhoneEnum for phone
            /// </summary>
            [EnumMember(Value = "phone")]
            PhoneEnum = 2,
            
            /// <summary>
            /// Enum PostalAddressEnum for postalAddress
            /// </summary>
            [EnumMember(Value = "postalAddress")]
            PostalAddressEnum = 3,
            
            /// <summary>
            /// Enum FaxEnum for fax
            /// </summary>
            [EnumMember(Value = "fax")]
            FaxEnum = 4,
            
            /// <summary>
            /// Enum AnyEnum for any
            /// </summary>
            [EnumMember(Value = "any")]
            AnyEnum = 5
        }

        /// <summary>
        /// Type of the contact medium, such as: email address, telephone number, postal address
        /// </summary>
        /// <value>Type of the contact medium, such as: email address, telephone number, postal address</value>
        [Required]
        [DataMember(Name="contactMediumType")]
        public ContactMediumTypeEnum? ContactMediumType { get; set; }

        /// <summary>
        /// The time period that the contact medium is valid for
        /// </summary>
        /// <value>The time period that the contact medium is valid for</value>
        [DataMember(Name="validFor")]
        public TimePeriod ValidFor { get; set; }

        /// <summary>
        /// Gets or Sets Characteristic
        /// </summary>
        [Required]
        [DataMember(Name="characteristic")]
        public MediumCharacteristic Characteristic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactMedium {\n");
            sb.Append("  Preferred: ").Append(Preferred).Append("\n");
            sb.Append("  ContactMediumType: ").Append(ContactMediumType).Append("\n");
            sb.Append("  ValidFor: ").Append(ValidFor).Append("\n");
            sb.Append("  Characteristic: ").Append(Characteristic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactMedium)obj);
        }

        /// <summary>
        /// Returns true if ContactMedium instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactMedium to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactMedium other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Preferred == other.Preferred ||
                    Preferred != null &&
                    Preferred.Equals(other.Preferred)
                ) && 
                (
                    ContactMediumType == other.ContactMediumType ||
                    ContactMediumType != null &&
                    ContactMediumType.Equals(other.ContactMediumType)
                ) && 
                (
                    ValidFor == other.ValidFor ||
                    ValidFor != null &&
                    ValidFor.Equals(other.ValidFor)
                ) && 
                (
                    Characteristic == other.Characteristic ||
                    Characteristic != null &&
                    Characteristic.Equals(other.Characteristic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Preferred != null)
                    hashCode = hashCode * 59 + Preferred.GetHashCode();
                    if (ContactMediumType != null)
                    hashCode = hashCode * 59 + ContactMediumType.GetHashCode();
                    if (ValidFor != null)
                    hashCode = hashCode * 59 + ValidFor.GetHashCode();
                    if (Characteristic != null)
                    hashCode = hashCode * 59 + Characteristic.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactMedium left, ContactMedium right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactMedium left, ContactMedium right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * CustomerManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// RoleType reference.
    /// </summary>
    [DataContract]
    public partial class RoleTypeRef : IEquatable<RoleTypeRef>
    { 
        /// <summary>
        /// The name of the role type. It uniquely identifies the role type within the partnership type.
        /// </summary>
        /// <value>The name of the role type. It uniquely identifies the role type within the partnership type.</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Reference url of the partnership type containing the role type
        /// </summary>
        /// <value>Reference url of the partnership type containing the role type</value>
        [DataMember(Name="partnershipHref")]
        public string PartnershipHref { get; set; }

        /// <summary>
        /// The identifier of the partnership type containing the role type
        /// </summary>
        /// <value>The identifier of the partnership type containing the role type</value>
        [DataMember(Name="partnershipId")]
        public string PartnershipId { get; set; }

        /// <summary>
        /// The name of the partnership type defining this role type
        /// </summary>
        /// <value>The name of the partnership type defining this role type</value>
        [DataMember(Name="partnershipName")]
        public string PartnershipName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoleTypeRef {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PartnershipHref: ").Append(PartnershipHref).Append("\n");
            sb.Append("  PartnershipId: ").Append(PartnershipId).Append("\n");
            sb.Append("  PartnershipName: ").Append(PartnershipName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RoleTypeRef)obj);
        }

        /// <summary>
        /// Returns true if RoleTypeRef instances are equal
        /// </summary>
        /// <param name="other">Instance of RoleTypeRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoleTypeRef other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PartnershipHref == other.PartnershipHref ||
                    PartnershipHref != null &&
                    PartnershipHref.Equals(other.PartnershipHref)
                ) && 
                (
                    PartnershipId == other.PartnershipId ||
                    PartnershipId != null &&
                    PartnershipId.Equals(other.PartnershipId)
                ) && 
                (
                    PartnershipName == other.PartnershipName ||
                    PartnershipName != null &&
                    PartnershipName.Equals(other.PartnershipName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PartnershipHref != null)
                    hashCode = hashCode * 59 + PartnershipHref.GetHashCode();
                    if (PartnershipId != null)
                    hashCode = hashCode * 59 + PartnershipId.GetHashCode();
                    if (PartnershipName != null)
                    hashCode = hashCode * 59 + PartnershipName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RoleTypeRef left, RoleTypeRef right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RoleTypeRef left, RoleTypeRef right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

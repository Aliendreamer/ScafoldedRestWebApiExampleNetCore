/*
 * CustomerManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)
    /// </summary>
    [DataContract]
    public partial class MediumCharacteristic : IEquatable<MediumCharacteristic>
    { 
        /// <summary>
        /// The city
        /// </summary>
        /// <value>The city</value>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// The country
        /// </summary>
        /// <value>The country</value>
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Full email address in standard format
        /// </summary>
        /// <value>Full email address in standard format</value>
        [DataMember(Name="emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The fax number of the contact
        /// </summary>
        /// <value>The fax number of the contact</value>
        [DataMember(Name="faxNumber")]
        public string FaxNumber { get; set; }

        /// <summary>
        /// The primary phone number of the contact
        /// </summary>
        /// <value>The primary phone number of the contact</value>
        [DataMember(Name="phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Postcode
        /// </summary>
        /// <value>Postcode</value>
        [DataMember(Name="postCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// State or province
        /// </summary>
        /// <value>State or province</value>
        [DataMember(Name="stateOrProvince")]
        public string StateOrProvince { get; set; }

        /// <summary>
        /// Describes the street
        /// </summary>
        /// <value>Describes the street</value>
        [DataMember(Name="street1")]
        public string Street1 { get; set; }

        /// <summary>
        /// Complementary street description
        /// </summary>
        /// <value>Complementary street description</value>
        [DataMember(Name="street2")]
        public string Street2 { get; set; }

        /// <summary>
        /// Type of medium (fax, mobile phone...)
        /// </summary>
        /// <value>Type of medium (fax, mobile phone...)</value>
        [DataMember(Name="mediumCharacteristicType")]
        public string MediumCharacteristicType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediumCharacteristic {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("  Street1: ").Append(Street1).Append("\n");
            sb.Append("  Street2: ").Append(Street2).Append("\n");
            sb.Append("  MediumCharacteristicType: ").Append(MediumCharacteristicType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediumCharacteristic)obj);
        }

        /// <summary>
        /// Returns true if MediumCharacteristic instances are equal
        /// </summary>
        /// <param name="other">Instance of MediumCharacteristic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediumCharacteristic other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) && 
                (
                    FaxNumber == other.FaxNumber ||
                    FaxNumber != null &&
                    FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    PostCode == other.PostCode ||
                    PostCode != null &&
                    PostCode.Equals(other.PostCode)
                ) && 
                (
                    StateOrProvince == other.StateOrProvince ||
                    StateOrProvince != null &&
                    StateOrProvince.Equals(other.StateOrProvince)
                ) && 
                (
                    Street1 == other.Street1 ||
                    Street1 != null &&
                    Street1.Equals(other.Street1)
                ) && 
                (
                    Street2 == other.Street2 ||
                    Street2 != null &&
                    Street2.Equals(other.Street2)
                ) && 
                (
                    MediumCharacteristicType == other.MediumCharacteristicType ||
                    MediumCharacteristicType != null &&
                    MediumCharacteristicType.Equals(other.MediumCharacteristicType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                    if (FaxNumber != null)
                    hashCode = hashCode * 59 + FaxNumber.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (PostCode != null)
                    hashCode = hashCode * 59 + PostCode.GetHashCode();
                    if (StateOrProvince != null)
                    hashCode = hashCode * 59 + StateOrProvince.GetHashCode();
                    if (Street1 != null)
                    hashCode = hashCode * 59 + Street1.GetHashCode();
                    if (Street2 != null)
                    hashCode = hashCode * 59 + Street2.GetHashCode();
                    if (MediumCharacteristicType != null)
                    hashCode = hashCode * 59 + MediumCharacteristicType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MediumCharacteristic left, MediumCharacteristic right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediumCharacteristic left, MediumCharacteristic right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * CustomerManagement
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Organization : IEquatable<Organization>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TradingName
        /// </summary>
        [DataMember(Name="tradingName")]
        public string TradingName { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href")]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets IsLegalEntity
        /// </summary>
        [DataMember(Name="isLegalEntity")]
        public string IsLegalEntity { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationType
        /// </summary>
        [DataMember(Name="organizationType")]
        public string OrganizationType { get; set; }

        /// <summary>
        /// Gets or Sets NameType
        /// </summary>
        [DataMember(Name="nameType")]
        public string NameType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Organization {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TradingName: ").Append(TradingName).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  IsLegalEntity: ").Append(IsLegalEntity).Append("\n");
            sb.Append("  OrganizationType: ").Append(OrganizationType).Append("\n");
            sb.Append("  NameType: ").Append(NameType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Organization)obj);
        }

        /// <summary>
        /// Returns true if Organization instances are equal
        /// </summary>
        /// <param name="other">Instance of Organization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organization other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TradingName == other.TradingName ||
                    TradingName != null &&
                    TradingName.Equals(other.TradingName)
                ) && 
                (
                    Href == other.Href ||
                    Href != null &&
                    Href.Equals(other.Href)
                ) && 
                (
                    IsLegalEntity == other.IsLegalEntity ||
                    IsLegalEntity != null &&
                    IsLegalEntity.Equals(other.IsLegalEntity)
                ) && 
                (
                    OrganizationType == other.OrganizationType ||
                    OrganizationType != null &&
                    OrganizationType.Equals(other.OrganizationType)
                ) && 
                (
                    NameType == other.NameType ||
                    NameType != null &&
                    NameType.Equals(other.NameType)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TradingName != null)
                    hashCode = hashCode * 59 + TradingName.GetHashCode();
                    if (Href != null)
                    hashCode = hashCode * 59 + Href.GetHashCode();
                    if (IsLegalEntity != null)
                    hashCode = hashCode * 59 + IsLegalEntity.GetHashCode();
                    if (OrganizationType != null)
                    hashCode = hashCode * 59 + OrganizationType.GetHashCode();
                    if (NameType != null)
                    hashCode = hashCode * 59 + NameType.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Organization left, Organization right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Organization left, Organization right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
